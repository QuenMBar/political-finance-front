import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
    jwt: sessionStorage.getItem("jwtToken") || "",
    loginStatus: "",
    userWatchListIds: [],
    status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk("login/fetchUser", async (data, actions) => {
    // console.log(selectJWT(actions.getState()));
    const response = await fetchUser(data.username, data.password);
    return response.token;
});

function fetchUser(username, password) {
    return new Promise((resolve) => {
        fetch("http://localhost:3000/login", {
            method: "POST", // or 'PUT'
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                user: {
                    username: username,
                    password: password,
                },
            }),
        })
            .then((data) => data.json())
            .then((data) => {
                resolve(data);
            });
    });
}

export const getRelationsAsync = createAsyncThunk("login/fetchWatchList", async (data, actions) => {
    const response = await fetchWatchList(selectJWT(actions.getState()));
    return response;
});

function fetchWatchList(jwt) {
    return new Promise((resolve) => {
        fetch("http://localhost:3000/users/relations", {
            headers: {
                token: jwt,
            },
        })
            .then((data) => data.json())
            .then((data) => {
                let array = [];
                array = array
                    .concat(data.data.relationships.counties.data)
                    .concat(data.data.relationships.individual_donations.data)
                    .concat(data.data.relationships.zip_codes.data);
                resolve(array);
            });
    });
}

export const loginReducer = createSlice({
    name: "login",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        logout: (state) => {
            sessionStorage.removeItem("jwtToken");
            state.jwt = "";
            state.userWatchListIds = [];
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loginAsync.pending, (state) => {
                state.status = "loading";
            })
            .addCase(loginAsync.fulfilled, (state, action) => {
                state.status = "idle";
                if (action.payload === undefined) {
                    state.jwt = "";
                    state.loginStatus = "Bad username or password";
                } else {
                    state.jwt = action.payload;
                    sessionStorage.setItem("jwtToken", action.payload);
                    state.loginStatus = "";
                }
            })
            .addCase(getRelationsAsync.fulfilled, (state, action) => {
                if (!Array.isArray(action.payload)) {
                    state.userWatchListIds = [];
                } else {
                    state.userWatchListIds = action.payload;
                }
            });
    },
});

export const { logout } = loginReducer.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectJWT = (state) => {
    return state.login.jwt;
};

export const selectWatchList = (state) => {
    return state.login.userWatchListIds;
};

export const selectStatus = (state) => {
    return state.login.loginStatus;
};

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const getRelationsAsync = () => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default loginReducer.reducer;
