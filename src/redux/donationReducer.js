import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
    geoJson: null,
    totalDonation: 0.0,
    repDonation: 0.0,
    demDonation: 0.0,
    otherDonation: 0.0,
    totalShowDonation: 0.0,
    repShowDonation: 0.0,
    demShowDonation: 0.0,
    otherShowDonation: 0.0,
    status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getGeoJsonAsync = createAsyncThunk("donation/getGeoJson", async (data) => {
    const response = await getGeoJson();
    return response;
});

function getGeoJson() {
    return new Promise((resolve) => {
        fetch("http://localhost:3000/geojson")
            .then(async (response) => {
                let result = await response.json();
                return {
                    response: result,
                    headers: {
                        totalDonation: parseFloat(response.headers.get("total_donated")),
                        demDonation: parseFloat(response.headers.get("dem_donation")),
                        repDonation: parseFloat(response.headers.get("rep_donation")),
                        otherDonation: parseFloat(response.headers.get("other_donation")),
                    },
                };
            })
            .then((data) => {
                resolve(data);
            });
    });
}

export const donationReducer = createSlice({
    name: "donation",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // increment: (state) => {
        //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //     // doesn't actually mutate the state because it uses the Immer library,
        //     // which detects changes to a "draft state" and produces a brand new
        //     // immutable state based off those changes
        //     state.value += 1;
        // },
        // decrement: (state) => {
        //     state.value -= 1;
        // },
        // // Use the PayloadAction type to declare the contents of `action.payload`
        setShowDonations: (state, action) => {
            // console.log("Setting State");
            state.totalShowDonation = action.payload.totalShowDonation;
            state.demShowDonation = action.payload.demShowDonation;
            state.repShowDonation = action.payload.repShowDonation;
            state.otherShowDonation = action.payload.otherShowDonation;
        },
        // logout: (state) => {
        //     sessionStorage.removeItem("jwtToken");
        //     state.jwt = "";
        // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getGeoJsonAsync.pending, (state) => {
                state.status = "loading";
            })
            .addCase(getGeoJsonAsync.fulfilled, (state, action) => {
                state.status = "idle";
                state.geoJson = action.payload.response;
                state.totalDonation = action.payload.headers.totalDonation;
                state.demDonation = action.payload.headers.demDonation;
                state.repDonation = action.payload.headers.repDonation;
                state.otherDonation = action.payload.headers.otherDonation;
            });
    },
});

export const { setShowDonations } = donationReducer.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectTotalDonations = (state) => {
    return {
        totalDonation: state.donation.totalDonation,
        demDonation: state.donation.demDonation,
        repDonation: state.donation.repDonation,
        otherDonation: state.donation.otherDonation,
    };
};
export const selectShowDonations = (state) => {
    // console.log(state);
    return {
        totalShowDonation: state.donation.totalShowDonation,
        demShowDonation: state.donation.demShowDonation,
        repShowDonation: state.donation.repShowDonation,
        otherShowDonation: state.donation.otherShowDonation,
    };
};
export const selectGeoJson = (state) => {
    return state.donation.geoJson;
};
export const selectStatus = (state) => {
    return state.donation.loginStatus;
};

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default donationReducer.reducer;
